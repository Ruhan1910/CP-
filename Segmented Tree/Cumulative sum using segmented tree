#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define ull unsigned long long
#define pii pair<int,int>
#define pll pair<ll,ll>
#define vi vector<int>
#define vl vector<ll>
#define m_p make_pair
#define pb push_back
#define fi first
#define sc second
#define PI acos(-1.0)
#define mod 1000000007
#define fastio std::ios_base::sync_with_stdio (false); cin.tie(0); cout.tie(0);
#define Check(n,pos) (n & (1<<pos))
#define Set(n,pos) (n  (1<<pos))
//-------------------------------------------------------------------
#define SZ 1000005
int MARK[SZ+1];
vector<int>PRIME;

void sieve(){
    MARK[1]=1;
    int root=sqrt(SZ);
    MARK[0]=MARK[1]=1;
    for(int i=4; i<SZ; i+=2) MARK[i]=1;
    
    for(int i=3; i<=root; i+=2){
        if(!MARK[i]){
            for(int j=i*i; j<=SZ; j+=(i*2)){
                MARK[j]=1;
            }
        }
    }
    PRIME.push_back(2);
    for(int i=3; i<=SZ; i+=2){
        if(!MARK[i]) PRIME.push_back(i);
    }
    return;
}

ll gcd(ll a, ll b){
    if(b==0) return a;
    return gcd(b,a%b);
}
ll BigMod(ll a, ll p, ll m){
    ll ret=1;
    while(p){
        if(p&1) ret=((ret%m)*(a%m))%m;
        a=((a%m)*(a%m))%m;
        p/=2;
    }
    return ret;
}
ll AddMul(ll a, ll p, ll m){
    ll ret=0;
    while(p){
        if(p&1) ret=((ret%m)+(a%m))%m;
        a=((a%m)+(a%m))%m;
    }
    return ret;
}
void iofile(){
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
}
//--------------------------------------------------------------------

int arr[SZ],tree[SZ*3];
void segtree(int node, int lo, int hi){
    if(lo==hi){
        tree[node]=arr[lo];
        return;
    }
    int left=node*2;
    int right=node*2+1;
    int mid=(lo+hi)/2;

    segtree(left,lo,mid);
    segtree(right,mid+1,hi);

    tree[node]=tree[left]+tree[right];

    return;
}

ll query(int node, int lo, int hi, int x, int y){
    if(x>hi || y<lo) return 0;
    if(x<=lo && y>=hi) return tree[node];

    int left=node*2;
    int right=node*2+1;
    int mid=(lo+hi)/2;
    ll res1=query(left,lo,mid,x,y);
    ll res2=query(right,mid+1,hi,x,y);

    return res1+res2;
}

void solve(){
    int n; cin>>n;
    for(int i=0; i<n; i++) cin>>arr[i];

    segtree(1,0,n-1);
    int q; cin>>q;
    for(int i=0; i<q; i++){
        int l, r; cin>>l>>r;
        cout<<query(1,0,n-1,l,r)<<endl;
    }
}


int main(){
    //clock_t ct; ct = clock();
    fastio;
    sieve();
    iofile();
    ll t=1, tc=1;
    //cin>>t;
    //cin.ignore();
    while(t--){
        //cout<<"Case "<<tc++<<": ";
        solve();
    }
    //ct = clock() - ct; double time_taken = ((double)ct)/CLOCKS_PER_SEC; cout<<time_taken<<endl;

    return 0;
}
