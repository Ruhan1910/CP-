//Link-https://www.hackerrank.com/challenges/longest-increasing-subsequent/problem


#include<bits/stdc++.h>
using namespace std;
#define ull unsigned long long
#define ll long long

void solve(){
    ll n;
    cin>>n;
    ll arr[n];
    for(int i=0; i<n; i++)
        cin>>arr[i];
    vector<ll>v;
    v.push_back(arr[0]);

    for(int i=1; i<n; i++){
        if(arr[i]>v.back()) v.push_back(arr[i]);//if current element is greater then previous one push 
        else{
            /*
            Find a position, where previous element is lower then current element 
            Here we always take the small value so if we step forward then the chance of
            increasing the size of LIS is maximum so we always try to take the small value
            */
            int ind=lower_bound(v.begin(),v.end(),arr[i])-v.begin();
            v[ind]=arr[i];
        }
    }
    cout<<v.size()<<endl;
    /*
    Example {3,4,1,5}
    here first take 3 v=3
    then take 4 v=3,4
    take 1 v=1,4 here we change 3 with 1 because if we take 3 and try to make LIS then if we get 2,3 in next we cannot take them
    but if we take 1 then there is a chance for take those values. lets see another example a={3,4,1,4,2,3}
    here if, v=3,4(means we do not take smaller values) then size of LIS is 2
    but if v=1,2,3 if we take smaller value and put them on a position which is greater or equal to current value then 
    the max size of LIS is become 3, which is the correct ans
    
    take 5 v=1,4,5 so whatever you try to take the maximum size of the LIS is 3;
    */

}

int main(){
    
    solve();

    return 0;
}
